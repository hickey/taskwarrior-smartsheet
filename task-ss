#!/usr/bin/env python

import os,sys,re
import argparse
import logging
import json

from taskw import TaskWarrior
from smartsheet import *


# Constants
CONF_FILE = os.getenv('TASK_SS_CONF') or '~/.task/smartsheet.json'


class ConfigStore:
    
    def __init__(self, conf_file=CONF_FILE):
        """ConfigStore(conf_file=CONF_FILE): object
        Read in the configuration file for locating API keys to connect to the
        Smartsheet API. The config file location can be controlled externally 
        by setting the environmental variable TASK_SS_CONF to the config file
        location. Environmental variables and tilde (~) can be used to specify 
        the file location. All parent directories must exist, but the file will
        be created if it does not exist."""
        
        self.config = {'key': None, 'proj': {}, }
        self.conf_file = os.path.expandvars( 
                         os.path.expanduser(conf_file))
        
        # expand conf_dir and test if we can proceed
        conf_dir = os.path.dirname(self.conf_file)
        if not os.path.exists(conf_dir):
            raise RuntimeError('Parent directory does not exist: ', conf_dir)
        elif not os.path.isdir(conf_dir):
            raise RuntimeError('Parent is not a directory: ', conf_dir)
        
        # Stream in the config file if it exists
        self._load_config(self.conf_file)
    
    
    def add_project(self, name, sheet, key=None):
            
        self._set('proj', sheet, name)
        
    
    def set_default_key(self, key):
        """set_default_key(key)
        Save a default key that can be used when a key has not been specified
        on a sheet."""
        self.config['key'] = key
        
        
    def default_key(self):
        if self.config['key']:
            return self.config['key']
        else:
            raise RuntimeError('Default API key not defined') 

    def save(self):
        """save()
        Take all existing keys in the Keystore object to the config file."""

        self._save_config()
        
        
    def projects(self):
        for item in self.config['proj'].keys():
            yield [item, self.config['proj'][item]]
 
 
    def _set(self, type, key, val):
        self.config[type][key] = val
        
    def _get(self, type, key):
        return self.config[type][key]
        
    def _del(self, type, key):
        if self.config[type].has_key(key):
            self.config[type][key].delete
    
    def _load_config(self, conf_file):
        if os.path.exists(conf_file):
            with open(conf_file, 'r') as fh:
                self.config = json.load(fh)
                        
                        
    def _save_config(self):
        with open(self.conf_file, 'w') as fh:
            json.dump(self.config, fh)
                

class SheetAPI:
    
    def __init__(self, config=None):
        
        if not config:
            raise RuntimeError('SheetsAPI needs reference to the configuration')
        self.config = config
        
        self.service = smartsheet.Smartsheet(self.config.default_key())

        
    def list_sheets(self, filter=None):
        """list_sheets(filter=None): Dict
        Connect to the Smartsheet API and request a list of sheets for the given
        filter. If not filter is specified (empty string or None) then all
        sheets will be requested. """
    
        sheets = {}
        for sheet in self.service.Sheets.list_sheets(include_all=True).data:
            match = True
            for text in filter:
                if text.startswith('!'):
                    # negative match (term found, deny match)
                    if re.search(text[1:], sheet.name, re.I):
                        match = False
                else:
                    # positive match (term found, allow match)
                    if not re.search(text, sheet.name, re.I):
                        match = False
                    
            if match:
                sheets[sheet.id] = sheet.name

        return sheets


    def gather_tasks(self):
        
        tasks = {}
        
        for name, entry in self.config.projects():
            print "name=%s" % name
            print "entry=%s" % entry
            # retrieve API key
            #key = self.config.find_key_for_sheet(entry[])
            # retrieve sheet
            
            # walk through rows
            
            # generate task data
            
            
        

if __name__ == '__main__':
    
    # Proceess command line args
    parser = argparse.ArgumentParser(description='Taskwarrior to Smartsheet Sync')

    parser.add_argument('--list', '-l', default=None, type=str, nargs='*',
                        metavar='SEARCH_TEXT', 
                        help='List available Smartsheets')
    parser.add_argument('--sheet', '-s', default=None, type=int, metavar='ID',
                        help='Smartsheet ID to setup a sync for')
    parser.add_argument('--key', '-k', default=None, type=str, 
                        metavar='API_KEY',
                        help='Specify API key to access sheets')
    parser.add_argument('--project', '-P', default=None, type=str,
                        metavar='NAME',
                        help='Taskwarrior project to associate with sheet')
    parser.add_argument('--default-key', '-K', default=None, type=str,
                        metavar='API_KEY',
                        help='Set default Smartsheet API key')
    parser.add_argument('--config', '-f', default=CONF_FILE, type=str, 
                        metavar='FILE',
                        help='Read specified config file for API keys')
    parser.add_argument('command', type=str, nargs='?',
                        choices=['add', 'delete', 'modify', 'sync'])
    
    
    args = parser.parse_args()
    
    
    #logging.basicConfig()
    #logging.getLogger().setLevel(logging.DEBUG)
    #requests_log = logging.getLogger("requests.packages.urllib3")
    #requests_log.setLevel(logging.DEBUG)
    #requests_log.propagate = True
    
    
    # load the configs for connecting to Smartsheet API
    config = ConfigStore(args.config)
    try:
        if config.default_key():
            api = SheetAPI(config)
    except RuntimeError:
        if not args.default_key:
            print('Default API key has not yet been set.')
        api = None
    
    
    ## Save a default key for future use
    if args.default_key:
        config.set_default_key(args.default_key)
        config.save()
    
    ## Display a list of sheets available to sync
    elif args.list is not None and api is not None:
        sheets = api.list_sheets(filter=args.list)
        for id,name in sheets.items():
            print('%22d : %s' % (id, name))
        
    ## Check for a command
    elif args.command:
        if args.command == 'add':
            # add needs to have sheet, proj and a key
            if not args.sheet:
                print("Sheet ID needs to be specified.")
                sys.exit(1)
            if not args.project:
                print("Project name needs to be specified.")
                sys.exit(1)
            if not args.key and not config.default_key():
                print("Need an API key to add sheet.")
                sys.exit(1)
                
            config.add_project(name=args.project, sheet=args.sheet, 
                               key=args.key)
            config.save()
            
        if args.command == 'sync':
            
            tasks = api.gather_tasks()
            
            #print tasks
    